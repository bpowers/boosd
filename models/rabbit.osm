package rabbit_fox

import "kinds"

model smooth callable (variable, delay, initial) {
        smooth stock = {
                biflow: (variable - smooth)/delay
                intial: initial
        }
}

interface Bathtub {
	inflow  flow
	outflow flow
	level   stock
}

interface GoToZero {
	action_to_go_to_zero flow = current_value/time_to_go_to_zero
	current_value        aux
	time_to_go_to_zero   aux `time`
}

interface Decay {
	flow outflow
	stock level
}

// implicitly implements Bathtub, when using Tub you specify the decay
// rate and the inflow.
model Tub {
	rate `1/time`
	flow inflow
	flow outflow = level * rate
	stock level = {
		inflow:  inflow
		outflow: outflow
	}
}

// implements bathtub
model CascadedLevels specializes Tub {
	flow inflow
	flow toLevel2 = level1 * rate
	flow toLevel3 = level2 * rate
	flow outflow  = level3 * rate

	stock level1 = {
		inflow:  inflow
		outflow: toLevel2
	}
	stock level2 = {
		inflow:  toLevel2
		outflow: toLevel3
	}
	stock level3 = {
		inflow:  toLevel2
		outflow: outflow
	}

	// aggregated reporting variable
	level = level1 + level2 + level3
}

SmoothN model {
	n      const `dmnl`
	inflow flow
	delay  aux   `time`

	rates  [n+1]flow = {
		rates[0]:  inflow
		rates[1:]: levels[i]/delay
	}

	levels [n]stock = {
		inflow:  rates[i]
		outflow: rates[i+1]
	}

	smoothn = levels[n-1]
}

// a set of levels, where one level's outflow is the inflow to the
// next level, etc. A cascade is an n-length series of material
// delays.
model CascadedN specializes Tub {
	n      const `dmnl`
	rate   aux   `time`
	inflow flow

	rates  [n+1]flow = {
		rates[0]:  inflow
		rates[1:]: levels[i]/rate
	}

	levels [n]stock = {
		inflow:  rates[i]
		outflow: rates[i+1]
	}

	outflow flow = rates[n]

	// aggregated reporting variable.  naming it the same as the
	// enclosing model signifies that, when used as a function,
	// the value of this variable is what should be used as the
	// 'return value'
	CascadedN = sum(levels)
}

model Delay3 callable(inflow, delay_time) {
	dl = delay_time/3
	Delay3 = Delay3I(inflow, delay_time, dl*inflow)
}

model Delay3I callable(inflow, delay_time, initial_value) {
	dl = delay_time/3
	cascaded = CascadedN(3, dl, inflow)
	Delay3I = cascaded.outflow
}

interface Population {
	flow births
	flow deaths
	flow migration
	stock population = {
		inflow:  births
		outflow: deaths
		biflow:  migration
	}
}

model Population `Individuals` {
        initial_population

        birth_rate `1/time`
        average_lifespan `time`

	flow migrations = 0
        flow births     = population * birth_rate
        flow deaths     = population / avg_lifespan

        stock population = {
		biflow:  migrations
                inflow:  births
		outflow: deaths
                initial: initial_population
        }

        avg_population = smooth(population, delay, initial)
}

// this model wraps a population model and makes it available to be
// used anywhere a bathtub model is called for, simply by hooking up 3
// variables (the 2 flows and an auxiliary) to the Population model
model BathtubPopulation {
	Population pop

	flow increasing = pop.inflow
	flow decreasing = pop.outflow
	level = pop.population
}

model RabbitPopulation `Rabbits` specializes Population {
        carrying_capacity
        consumption_of_rabbits

        initial_population = 500 `Rabbits`
        birth_rate         = 2 `Rabbits/sec`
        avg_lifespan       = 2 `years`
        crowding           = population/carrying_capacity

        table effect_on_deaths `dmnl` = [(0, 0.75), (3, 2.5), (6, 6), (8, 11), (10, 20)]

        flow deaths = max(population/avg_lifespan * effect_on_deaths[crowding],
                consumption_of_rabbits)
}

model FoxPopulation `Foxes` specializes Population {
        consumption_of_rabbits `Rabbits`

        initial_population = 30 `Foxes`
        birth_rate         = .25 `Foxes/year`
        avg_lifespan       = 4 `years`
        food_requirements  = 25 `Rabbits/year`
        food_availability  = consumption_of_rabbits/population/food_requirements

        table mortality_lookup = [(0, 20), (.3, 5), (.5, 2), (1, 1), (2, .5)]

        flow deaths = population/avg_lifespan*mortality_lookup[food_availability]
}

model RabbitFox {
        sim.integration = "euler"

        time = {
                start:     0  `years`
                end:       50 `years`
                step:      .5 `months`
                save_step: 1  `year`
        }

	time_in_secs `sec` = time

        crowding_effect = [(0, 0), (1, 1), (2, 2), (6, 2)][rabbits.crowding]

        fox_consumption_of_rabbits = foxes * foxes.food_requirements *
                crowding_effect

        rabbits = RabbitPopulation{
                carrying_capacity:      500 `Rabbits`
                consumption_of_rabbits: fox_consumption_of_rabbits
        }
        foxes = FoxPopulation{
                consumption_of_rabbits: fox_consumption_of_rabbits
        }

	grass_growth_rate  = .1 `1/year`
	grass_growth flow  = grass * grass_growth_rate
	grass_removal flow = 20

	grass stock = {
		initial: 100000 `mÂ²`
		inflow:  grass_growth
		outflow: grass_removal
	}
}
